// Generated by gencpp from file autopilot_bridge/SlaveSetupRequest.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_SLAVESETUPREQUEST_H
#define AUTOPILOT_BRIDGE_MESSAGE_SLAVESETUPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autopilot_bridge
{
template <class ContainerAllocator>
struct SlaveSetupRequest_
{
  typedef SlaveSetupRequest_<ContainerAllocator> Type;

  SlaveSetupRequest_()
    : enable(false)
    , channel()  {
    }
  SlaveSetupRequest_(const ContainerAllocator& _alloc)
    : enable(false)
    , channel(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _channel_type;
  _channel_type channel;




  typedef boost::shared_ptr< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SlaveSetupRequest_

typedef ::autopilot_bridge::SlaveSetupRequest_<std::allocator<void> > SlaveSetupRequest;

typedef boost::shared_ptr< ::autopilot_bridge::SlaveSetupRequest > SlaveSetupRequestPtr;
typedef boost::shared_ptr< ::autopilot_bridge::SlaveSetupRequest const> SlaveSetupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'autopilot_bridge': ['/home/osboxes/ACS/acs_ros_ws/src/autopilot_bridge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86e28548d579fee9cb11d12330629f9c";
  }

  static const char* value(const ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86e28548d579fee9ULL;
  static const uint64_t static_value2 = 0xcb11d12330629f9cULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/SlaveSetupRequest";
  }

  static const char* value(const ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n\
string channel\n\
";
  }

  static const char* value(const ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.channel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SlaveSetupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::SlaveSetupRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "channel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.channel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_SLAVESETUPREQUEST_H
