// Generated by gencpp from file autopilot_bridge/GeoPoseWithCovariance.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_GEOPOSEWITHCOVARIANCE_H
#define AUTOPILOT_BRIDGE_MESSAGE_GEOPOSEWITHCOVARIANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <autopilot_bridge/GeoPose.h>

namespace autopilot_bridge
{
template <class ContainerAllocator>
struct GeoPoseWithCovariance_
{
  typedef GeoPoseWithCovariance_<ContainerAllocator> Type;

  GeoPoseWithCovariance_()
    : pose()
    , covariance()  {
      covariance.assign(0.0);
  }
  GeoPoseWithCovariance_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::autopilot_bridge::GeoPose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef boost::array<double, 36>  _covariance_type;
  _covariance_type covariance;




  typedef boost::shared_ptr< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> const> ConstPtr;

}; // struct GeoPoseWithCovariance_

typedef ::autopilot_bridge::GeoPoseWithCovariance_<std::allocator<void> > GeoPoseWithCovariance;

typedef boost::shared_ptr< ::autopilot_bridge::GeoPoseWithCovariance > GeoPoseWithCovariancePtr;
typedef boost::shared_ptr< ::autopilot_bridge::GeoPoseWithCovariance const> GeoPoseWithCovarianceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'autopilot_bridge': ['/home/osboxes/ACS/acs_ros_ws/src/autopilot_bridge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49607a12d5ec103bbc7dc81cc88d8763";
  }

  static const char* value(const ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49607a12d5ec103bULL;
  static const uint64_t static_value2 = 0xbc7dc81cc88d8763ULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/GeoPoseWithCovariance";
  }

  static const char* value(const ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Pose using lat/lon/alt in place of x/y/z plus two altitude fields\n\
GeoPose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/GeoPose\n\
# 3-D point using lat/lon/alt, with two altitude options\n\
GeoPoint position\n\
\n\
# Quaternion orientation\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/GeoPoint\n\
# WGS84 latitude, longitude, and MSL altitude\n\
float64 lat\n\
float64 lon\n\
float64 alt\n\
\n\
# Relative altitude (custom definable, but generally set w.r.t. some home point)\n\
float64 rel_alt\n\
\n\
# Flag field for which altitudes are valid\n\
bool using_alt\n\
bool using_rel_alt\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GeoPoseWithCovariance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::autopilot_bridge::GeoPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_GEOPOSEWITHCOVARIANCE_H
