// Generated by gencpp from file ap_msgs/RedVehicleState.msg
// DO NOT EDIT!


#ifndef AP_MSGS_MESSAGE_REDVEHICLESTATE_H
#define AP_MSGS_MESSAGE_REDVEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <autopilot_bridge/Geodometry.h>

namespace ap_msgs
{
template <class ContainerAllocator>
struct RedVehicleState_
{
  typedef RedVehicleState_<ContainerAllocator> Type;

  RedVehicleState_()
    : vehicle_id(0)
    , state()  {
    }
  RedVehicleState_(const ContainerAllocator& _alloc)
    : vehicle_id(0)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _vehicle_id_type;
  _vehicle_id_type vehicle_id;

   typedef  ::autopilot_bridge::Geodometry_<ContainerAllocator>  _state_type;
  _state_type state;




  typedef boost::shared_ptr< ::ap_msgs::RedVehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ap_msgs::RedVehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct RedVehicleState_

typedef ::ap_msgs::RedVehicleState_<std::allocator<void> > RedVehicleState;

typedef boost::shared_ptr< ::ap_msgs::RedVehicleState > RedVehicleStatePtr;
typedef boost::shared_ptr< ::ap_msgs::RedVehicleState const> RedVehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ap_msgs::RedVehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ap_msgs::RedVehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ap_msgs': ['/home/osboxes/ACS/acs_ros_ws/src/autonomy-payload/ap_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'autopilot_bridge': ['/home/osboxes/ACS/acs_ros_ws/src/autopilot_bridge/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ap_msgs::RedVehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ap_msgs::RedVehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ap_msgs::RedVehicleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef5d7d802716ea8b3f5a48b7fd28ed2b";
  }

  static const char* value(const ::ap_msgs::RedVehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef5d7d802716ea8bULL;
  static const uint64_t static_value2 = 0x3f5a48b7fd28ed2bULL;
};

template<class ContainerAllocator>
struct DataType< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ap_msgs/RedVehicleState";
  }

  static const char* value(const ::ap_msgs::RedVehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 vehicle_id\n\
autopilot_bridge/Geodometry state\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/Geodometry\n\
# Odometry message but with GeoPoseWithCovariance instead\n\
\n\
std_msgs/Header header\n\
string child_frame_id\n\
GeoPoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/GeoPoseWithCovariance\n\
# Pose using lat/lon/alt in place of x/y/z plus two altitude fields\n\
GeoPose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/GeoPose\n\
# 3-D point using lat/lon/alt, with two altitude options\n\
GeoPoint position\n\
\n\
# Quaternion orientation\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: autopilot_bridge/GeoPoint\n\
# WGS84 latitude, longitude, and MSL altitude\n\
float64 lat\n\
float64 lon\n\
float64 alt\n\
\n\
# Relative altitude (custom definable, but generally set w.r.t. some home point)\n\
float64 rel_alt\n\
\n\
# Flag field for which altitudes are valid\n\
bool using_alt\n\
bool using_rel_alt\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ap_msgs::RedVehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_id);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RedVehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ap_msgs::RedVehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ap_msgs::RedVehicleState_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_id);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::autopilot_bridge::Geodometry_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AP_MSGS_MESSAGE_REDVEHICLESTATE_H
