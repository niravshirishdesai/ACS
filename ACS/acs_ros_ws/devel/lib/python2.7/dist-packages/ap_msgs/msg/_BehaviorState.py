# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ap_msgs/BehaviorState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BehaviorState(genpy.Message):
  _md5sum = "1c5487d0efa12e59fc9bb8960f39f1a6"
  _type = "ap_msgs/BehaviorState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8  behavior_id
uint32 sequence
bool   is_ready
bool   is_active
bool   is_paused
"""
  __slots__ = ['behavior_id','sequence','is_ready','is_active','is_paused']
  _slot_types = ['uint8','uint32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       behavior_id,sequence,is_ready,is_active,is_paused

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BehaviorState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.behavior_id is None:
        self.behavior_id = 0
      if self.sequence is None:
        self.sequence = 0
      if self.is_ready is None:
        self.is_ready = False
      if self.is_active is None:
        self.is_active = False
      if self.is_paused is None:
        self.is_paused = False
    else:
      self.behavior_id = 0
      self.sequence = 0
      self.is_ready = False
      self.is_active = False
      self.is_paused = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI3B.pack(_x.behavior_id, _x.sequence, _x.is_ready, _x.is_active, _x.is_paused))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.behavior_id, _x.sequence, _x.is_ready, _x.is_active, _x.is_paused,) = _struct_BI3B.unpack(str[start:end])
      self.is_ready = bool(self.is_ready)
      self.is_active = bool(self.is_active)
      self.is_paused = bool(self.is_paused)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI3B.pack(_x.behavior_id, _x.sequence, _x.is_ready, _x.is_active, _x.is_paused))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.behavior_id, _x.sequence, _x.is_ready, _x.is_active, _x.is_paused,) = _struct_BI3B.unpack(str[start:end])
      self.is_ready = bool(self.is_ready)
      self.is_active = bool(self.is_active)
      self.is_paused = bool(self.is_paused)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI3B = struct.Struct("<BI3B")
