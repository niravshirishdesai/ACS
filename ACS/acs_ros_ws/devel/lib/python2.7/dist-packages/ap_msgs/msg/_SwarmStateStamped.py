# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ap_msgs/SwarmStateStamped.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ap_msgs.msg
import autopilot_bridge.msg
import geometry_msgs.msg
import genpy
import std_msgs.msg

class SwarmStateStamped(genpy.Message):
  _md5sum = "78ea5b34da85e635bfd97e9c4d936db8"
  _type = "ap_msgs/SwarmStateStamped"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint16[] crashed_list
ap_msgs/SwarmVehicleState[] swarm

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ap_msgs/SwarmVehicleState
uint16 vehicle_id
uint16 subswarm_id
time received_at
uint8 swarm_state
uint8 swarm_behavior
autopilot_bridge/Geodometry state

================================================================================
MSG: autopilot_bridge/Geodometry
# Odometry message but with GeoPoseWithCovariance instead

std_msgs/Header header
string child_frame_id
GeoPoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: autopilot_bridge/GeoPoseWithCovariance
# Pose using lat/lon/alt in place of x/y/z plus two altitude fields
GeoPose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: autopilot_bridge/GeoPose
# 3-D point using lat/lon/alt, with two altitude options
GeoPoint position

# Quaternion orientation
geometry_msgs/Quaternion orientation

================================================================================
MSG: autopilot_bridge/GeoPoint
# WGS84 latitude, longitude, and MSL altitude
float64 lat
float64 lon
float64 alt

# Relative altitude (custom definable, but generally set w.r.t. some home point)
float64 rel_alt

# Flag field for which altitudes are valid
bool using_alt
bool using_rel_alt

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','crashed_list','swarm']
  _slot_types = ['std_msgs/Header','uint16[]','ap_msgs/SwarmVehicleState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,crashed_list,swarm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwarmStateStamped, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.crashed_list is None:
        self.crashed_list = []
      if self.swarm is None:
        self.swarm = []
    else:
      self.header = std_msgs.msg.Header()
      self.crashed_list = []
      self.swarm = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.crashed_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.crashed_list))
      length = len(self.swarm)
      buff.write(_struct_I.pack(length))
      for val1 in self.swarm:
        _x = val1
        buff.write(_struct_2H.pack(_x.vehicle_id, _x.subswarm_id))
        _v1 = val1.received_at
        _x = _v1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_2B.pack(_x.swarm_state, _x.swarm_behavior))
        _v2 = val1.state
        _v3 = _v2.header
        buff.write(_struct_I.pack(_v3.seq))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v2.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = _v2.pose
        _v6 = _v5.pose
        _v7 = _v6.position
        _x = _v7
        buff.write(_struct_4d2B.pack(_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt))
        _v8 = _v6.orientation
        _x = _v8
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_36d.pack(*_v5.covariance))
        _v9 = _v2.twist
        _v10 = _v9.twist
        _v11 = _v10.linear
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v12 = _v10.angular
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_36d.pack(*_v9.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.swarm is None:
        self.swarm = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.crashed_list = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.swarm = []
      for i in range(0, length):
        val1 = ap_msgs.msg.SwarmVehicleState()
        _x = val1
        start = end
        end += 4
        (_x.vehicle_id, _x.subswarm_id,) = _struct_2H.unpack(str[start:end])
        _v13 = val1.received_at
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.swarm_state, _x.swarm_behavior,) = _struct_2B.unpack(str[start:end])
        _v14 = val1.state
        _v15 = _v14.header
        start = end
        end += 4
        (_v15.seq,) = _struct_I.unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8')
        else:
          _v15.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.child_frame_id = str[start:end].decode('utf-8')
        else:
          _v14.child_frame_id = str[start:end]
        _v17 = _v14.pose
        _v18 = _v17.pose
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 34
        (_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt,) = _struct_4d2B.unpack(str[start:end])
        _v19.using_alt = bool(_v19.using_alt)
        _v19.using_rel_alt = bool(_v19.using_rel_alt)
        _v20 = _v18.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v17.covariance = _struct_36d.unpack(str[start:end])
        _v21 = _v14.twist
        _v22 = _v21.twist
        _v23 = _v22.linear
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v24 = _v22.angular
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v21.covariance = _struct_36d.unpack(str[start:end])
        self.swarm.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.crashed_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.crashed_list.tostring())
      length = len(self.swarm)
      buff.write(_struct_I.pack(length))
      for val1 in self.swarm:
        _x = val1
        buff.write(_struct_2H.pack(_x.vehicle_id, _x.subswarm_id))
        _v25 = val1.received_at
        _x = _v25
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_2B.pack(_x.swarm_state, _x.swarm_behavior))
        _v26 = val1.state
        _v27 = _v26.header
        buff.write(_struct_I.pack(_v27.seq))
        _v28 = _v27.stamp
        _x = _v28
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v27.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v26.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v29 = _v26.pose
        _v30 = _v29.pose
        _v31 = _v30.position
        _x = _v31
        buff.write(_struct_4d2B.pack(_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt))
        _v32 = _v30.orientation
        _x = _v32
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v29.covariance.tostring())
        _v33 = _v26.twist
        _v34 = _v33.twist
        _v35 = _v34.linear
        _x = _v35
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v36 = _v34.angular
        _x = _v36
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_v33.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.swarm is None:
        self.swarm = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.crashed_list = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.swarm = []
      for i in range(0, length):
        val1 = ap_msgs.msg.SwarmVehicleState()
        _x = val1
        start = end
        end += 4
        (_x.vehicle_id, _x.subswarm_id,) = _struct_2H.unpack(str[start:end])
        _v37 = val1.received_at
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.swarm_state, _x.swarm_behavior,) = _struct_2B.unpack(str[start:end])
        _v38 = val1.state
        _v39 = _v38.header
        start = end
        end += 4
        (_v39.seq,) = _struct_I.unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v38.child_frame_id = str[start:end].decode('utf-8')
        else:
          _v38.child_frame_id = str[start:end]
        _v41 = _v38.pose
        _v42 = _v41.pose
        _v43 = _v42.position
        _x = _v43
        start = end
        end += 34
        (_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt,) = _struct_4d2B.unpack(str[start:end])
        _v43.using_alt = bool(_v43.using_alt)
        _v43.using_rel_alt = bool(_v43.using_rel_alt)
        _v44 = _v42.orientation
        _x = _v44
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v41.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v45 = _v38.twist
        _v46 = _v45.twist
        _v47 = _v46.linear
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v48 = _v46.angular
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v45.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        self.swarm.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_36d = struct.Struct("<36d")
_struct_4d2B = struct.Struct("<4d2B")
_struct_3I = struct.Struct("<3I")
_struct_2B = struct.Struct("<2B")
_struct_4d = struct.Struct("<4d")
_struct_2H = struct.Struct("<2H")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
