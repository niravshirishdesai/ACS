# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autopilot_bridge/GeoPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GeoPoint(genpy.Message):
  _md5sum = "c121d48ffba7006a7ab486f309ebbbb8"
  _type = "autopilot_bridge/GeoPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# WGS84 latitude, longitude, and MSL altitude
float64 lat
float64 lon
float64 alt

# Relative altitude (custom definable, but generally set w.r.t. some home point)
float64 rel_alt

# Flag field for which altitudes are valid
bool using_alt
bool using_rel_alt
"""
  __slots__ = ['lat','lon','alt','rel_alt','using_alt','using_rel_alt']
  _slot_types = ['float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lat,lon,alt,rel_alt,using_alt,using_rel_alt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GeoPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.rel_alt is None:
        self.rel_alt = 0.
      if self.using_alt is None:
        self.using_alt = False
      if self.using_rel_alt is None:
        self.using_rel_alt = False
    else:
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.rel_alt = 0.
      self.using_alt = False
      self.using_rel_alt = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d2B.pack(_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt,) = _struct_4d2B.unpack(str[start:end])
      self.using_alt = bool(self.using_alt)
      self.using_rel_alt = bool(self.using_rel_alt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d2B.pack(_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.lat, _x.lon, _x.alt, _x.rel_alt, _x.using_alt, _x.using_rel_alt,) = _struct_4d2B.unpack(str[start:end])
      self.using_alt = bool(self.using_alt)
      self.using_rel_alt = bool(self.using_rel_alt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d2B = struct.Struct("<4d2B")
